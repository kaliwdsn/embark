#!/usr/bin/env node

var dedent = require('dedent');
var fs = require('fs');
var path = require('path');
var semver = require('semver');

console.log();
console.log('process.argv');
console.log(process.argv);

var CmdEmbark = require('../lib/index');
var minVer = '8.11.3';
var procVer = semver.clean(process.version);

if (semver.lt(procVer, minVer)) {
    console.error('\n' + dedent(`
        ${`Unsupported Node.js version`.underline}

        ${`Embark requires a newer version of Node.js`.red.bold}

        ${`>= ${minVer}`.green.bold}   required
           ${procVer.red.bold}   actual
    `).trim());
    process.exit();
}

var cmdPath = __filename;
var cmdPathReal = fs.realpathSync(cmdPath);
var cmdVersion = semver.clean((new CmdEmbark).version);

var PkgCmdEmbark = null;
var pkgCmdPath = path.join(process.cwd(), 'node_modules/.bin/embark');
var pkgCmdPathReal = null;
var pkgCmdVersion = null;

if (path.dirname(cmdPath).split(path.sep).pop() !== '.bin') {
    try {
        pkgCmdPathReal = fs.realpathSync(pkgCmdPath);
    } catch (e) {
        console.warn('\n' + dedent(`
            ${`Missing package-local embark command`.underline}

            ${`Path not found`.yellow.bold}

            ${pkgCmdPath.red.bold}
        `).trim());
    }
}

console.log();
console.log('cmd path:', cmdPath);
console.log('cmd real:', cmdPathReal);
console.log('pkgCmd path:', pkgCmdPath);
console.log('pkgCmd real:', pkgCmdPathReal);

var pkgJson = null;
var pkgJsonPath = path.join(process.cwd(), 'package.json');
var pkgJsonPathReal = null;
var pkgJsonDepVersionRange = null;
var pkgJsonDevDepVersionRange = null;

try {
    pkgJsonPathReal = fs.realpathSync(pkgJsonPath);
} catch (e) {
    console.warn('\n' + dedent(`
        ${`Missing package.json`.underline}

        ${`Path not found`.yellow.bold}

        ${pkgJsonPath.red.bold}
    `).trim());
}

if (pkgJsonPathReal) {
    try {
        pkgJson = require(pkgJsonPath);
    } catch (e) {
        console.warn('\n' + dedent(`
            ${`Bad package.json`.underline}

            ${`Contents invalid`.yellow.bold}

            ${pkgJsonPath.red.bold}
        `).trim());
    }
}

if (pkgJsonPathReal && pkgJson) {
    try {
        pkgJsonDepVersionRange = pkgJson.dependencies.embark;
        pkgJsonDepVersionRange =
            semver.Range(pkgJsonDepVersionRange).range;
    } catch (e) {
        pkgJsonDepVersionRange = null;
    }

    try {
        pkgJsonDevDepVersionRange = pkgJson.devDependencies.embark;
        pkgJsonDevDepVersionRange =
            semver.Range(pkgJsonDevDepVersionRange).range;
    } catch (e) {
        pkgJsonDevDepVersionRange = null;
    }

    if (!(pkgJsonDepVersionRange || pkgJsonDevDepVersionRange)) {
        console.warn('\n' + dedent(`
            ${`Missing package-local depedency in package.json`.underline}

            ${`"embark" was not validly specified in dependencies or devDependencies`.yellow.bold}

            ${`recommended fix: \`npm install --save embark\``.green.bold}
        `).trim());
    }
}

console.log();
console.log('package.json');
console.log(pkgJson);

console.log();
console.log('embark dep info');
console.log('dep:', pkgJsonDepVersionRange);
console.log('devDep:', pkgJsonDevDepVersionRange);

if (pkgCmdPathReal && cmdPathReal !== pkgCmdPathReal) {
    try {
        PkgCmdEmbark = require(
            path.join(path.dirname(pkgCmdPath), '../embark/lib/index')
        );
        pkgCmdVersion = semver.clean((new PkgCmdEmbark).version);

        if (cmdVersion !== pkgCmdVersion) {
            console.log('\n' + dedent(`
                ${`Embark version mismatch`.underline}

                ${`Invoked embark cli was a different version than package-local embark`.yellow.bold}

                invoked \t${cmdVersion.yellow.bold} \t ${cmdPath}
                local \t\t${pkgCmdVersion.green.bold} \t ${pkgCmdPath}
            `).trim());
        }
    } catch (e) {
        console.warn('\n' + dedent(`
            ${`Missing version information`.underline}

            ${`Version info not obtained from package-local embark command`.yellow.bold}

            path: ${pkgCmdPath}
        `).trim());
    }
}

console.log();
console.log('embark version info');
console.log('cmd:', cmdVersion);
console.log('pkgCmd:', pkgCmdVersion);
console.log();

if (pkgCmdVersion) {
    process.argv[1] = pkgCmdPath;
    require(pkgCmdPath);
} else {
    var Cmd = require('../lib/cmd');
    var cli = new Cmd();
    cli.process(process.argv);
}
