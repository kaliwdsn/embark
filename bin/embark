#!/usr/bin/env node

require('colors');
var dedent = require('dedent');
var findPrefix = require('find-npm-prefix');
var fs = require('fs');
var path = require('path');
var semver = require('semver');

function reformat(s) {
    return '\n' + dedent(s).trim();
}

var minNodeVer = '8.11.3';
var procNodeVer = semver.clean(process.version);

if (semver.lt(procNodeVer, minNodeVer)) {
    console.error(reformat(`
        ${`Unsupported Node.js version`.underline}

        ${`Embark requires a more recent version of Node.js`.red.bold}

        ${`>= ${minNodeVer}`.green.bold} \t required
        ${`   ${procNodeVer}`.red.bold} \t actual
    `));
    process.exit(1);
}

// if the property exists, the command was executed via `npm run ...`
var has_INIT_CWD = process.env.hasOwnProperty('INIT_CWD');

// console.log();
// console.log('process.argv');
// console.log(process.argv);

findPrefix(process.cwd()).then((pkgdir) => {
    if (!has_INIT_CWD) {
        process.chdir(pkgdir);
    }

    var warned = false;
    var pkgJson = null;
    var pkgJsonPath = path.join(process.cwd(), 'package.json');
    var pkgJsonPathReal = null;

    var pkgJsonDepVersionRange = null;
    var pkgJsonDepVersionRangeMissing = false;
    var pkgJsonDepVersionRangeValid = null;

    var pkgJsonDevDepVersionRange = null;
    var pkgJsonDevDepVersionRangeMissing = false;
    var pkgJsonDevDepVersionRangeValid = null;

    try {
        pkgCmdPathReal = fs.realpathSync(pkgCmdPath);
        pkgJsonPathReal = fs.realpathSync(pkgJsonPath);
    } catch (e) {
        console.warn(reformat(`
            ${`Missing package-local embark command`.underline}
        console.error(reformat(`
            ${`Missing package.json`.underline}

            ${`File not found`.red.bold}

            ${`Path not found`.yellow.bold}
            ${`Make sure a valid package.json file exists at the top-level of your DApp project`.yellow.bold}

            ${pkgCmdPath.red.bold}
            package.json path: ${pkgJsonPath.red.bold}
        `));
        warned = true;
        process.exit(1);
    }

    if (pkgJsonPathReal) {
        try {
            pkgJson = require(pkgJsonPath);
        } catch (e) {
            console.error(reformat(`
                ${`Bad package.json`.underline}

                ${`File could not be parsed as valid JSON`.red.bold}

                package.json path: ${pkgJsonPath.red.bold}
            `));
            process.exit(1);
        }
    }

    // console.log();
    // console.log('package.json');
    // console.log(pkgJson);

    if (pkgJsonPathReal && pkgJson) {
        try {
            pkgJsonDepVersionRange = pkgJson.dependencies.embark;
        } catch (e) {}

        if (!pkgJsonDepVersionRange) {
            pkgJsonDepVersionRangeMissing = true;
        }

        if (!pkgJsonDepVersionRangeMissing) {
            try {
                pkgJsonDepVersionRangeValid =
                    semver.Range(pkgJsonDepVersionRange).range;
            } catch (e) {}
        }

        try {
            pkgJsonDevDepVersionRange = pkgJson.devDependencies.embark;
        } catch (e) {}

        if (!pkgJsonDevDepVersionRange) {
            pkgJsonDevDepVersionRangeMissing = true;
        }

        if (!pkgJsonDevDepVersionRangeMissing) {
            try {
                pkgJsonDevDepVersionRangeValid =
                    semver.Range(pkgJsonDevDepVersionRange).range;
            } catch (e) {}
        }

        if (pkgJsonDepVersionRangeMissing && pkgJsonDevDepVersionRangeMissing) {
            console.warn(reformat(`
                ${`Missing "embark" depedency in package.json`.underline}

                ${`Embark package was not specified in "dependencies" or "devDependencies" of package.json`.yellow.bold}

                ${`recommended fix: \`npm install --save embark\``.green.bold}

                package.json path: ${pkgJsonPath.yellow.bold}
            `));
            warned = true;
        }

        if (!pkgJsonDepVersionRangeMissing && !pkgJsonDevDepVersionRangeMissing) {
            console.warn(reformat(`
                ${`Multiple "embark" depedencies in package.json`.underline}

                ${`Embark package was specified in both "dependencies" and "devDependencies" of package.json`.yellow.bold}

                package.json path: ${pkgJsonPath.yellow.bold}
            `));
            warned = true;
        }

        function warnInvalid(which) {
            console.warn(reformat(`
                ${`Bad "embark" depedency in package.json`.underline}

                ${`Embark package was invalidly specified in "${which}" of package.json`.yellow.bold}

                package.json path: ${pkgJsonPath.yellow.bold}
            `));
            warned = true;
        }

        if (!pkgJsonDepVersionRangeMissing && !pkgJsonDepVersionRangeValid) {
            warnInvalid('dependencies');
        }

        if (!pkgJsonDevDepVersionRangeMissing && !pkgJsonDevDepVersionRangeValid) {
            warnInvalid('devDependencies');
        }
    }

    // console.log();
    // console.log('embark dep info');
    // console.log('dep:', pkgJsonDepVersionRange);
    // console.log('devDep:', pkgJsonDevDepVersionRange);
    // console.log('depValid:', pkgJsonDepVersionRangeValid);
    // console.log('devDepValid:', pkgJsonDevDepVersionRangeValid);

    try {
    } catch (e) {


        `));
    }

    }

    }

        console.warn(reformat(`


        `));
        warned = true;
    }




        if (cmdVersion !== pkgCmdVersion) {
            console.warn(reformat(`
                ${`Embark version mismatch`.underline}

                ${`Invoked embark cli was a different version than package-local embark`.yellow.bold}

                ${pkgCmdVersion.green.bold} \t local \t\t ${pkgCmdPath}
                ${cmdVersion.yellow.bold} \t invoked \t ${cmdPath}
            `));
            warned = true;
        }
    } catch (e) {
        console.warn(reformat(`
            ${`Missing version information`.underline}

            ${`Version info not obtained from package-local embark command`.yellow.bold}

            path: ${pkgCmdPath}
        `));
        warned = true;
    }



});
