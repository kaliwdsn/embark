#!/usr/bin/env node

require('colors');
var dedent = require('dedent');
var findPrefix = require('find-npm-prefix');
var fs = require('fs');
var path = require('path');
var semver = require('semver');

function reformat(s) {
    return '\n' + dedent(s).trim();
}

var minNodeVer = '8.11.3';
var procNodeVer = semver.clean(process.version);

if (semver.lt(procNodeVer, minNodeVer)) {
    console.error(reformat(`
        ${`Unsupported Node.js version`.underline}

        ${`Embark requires a more recent version of Node.js`.red.bold}

        ${`>= ${minNodeVer}`.green.bold} \t required
        ${`   ${procNodeVer}`.red.bold} \t actual
    `));
    process.exit(1);
}

// if the property exists, the command was executed via `npm run ...`
var has_INIT_CWD = process.env.hasOwnProperty('INIT_CWD');

// console.log();
// console.log('process.argv');
// console.log(process.argv);

findPrefix(process.cwd()).then((pkgdir) => {
    if (!has_INIT_CWD) {
        process.chdir(pkgdir);
    }

    var warned = false;

    try {
        pkgCmdPathReal = fs.realpathSync(pkgCmdPath);
    } catch (e) {
        console.warn(reformat(`
            ${`Missing package-local embark command`.underline}

            ${`Path not found`.yellow.bold}

            ${pkgCmdPath.red.bold}
        `));
        warned = true;
    }


    try {
        pkgJson = require(pkgJsonPath);
    } catch (e) {
        console.warn(reformat(`
            ${`Bad package.json`.underline}

            ${`Contents invalid`.yellow.bold}

            ${pkgJsonPath.red.bold}
        `));
        warned = true;;
    }

    }

    try {
        pkgJsonDevDepVersionRange = pkgJson.devDependencies.embark;
        pkgJsonDevDepVersionRange =
            semver.Range(pkgJsonDevDepVersionRange).range;
    } catch (e) {
        pkgJsonDevDepVersionRange = null;
    }

    if (!(pkgJsonDepVersionRange || pkgJsonDevDepVersionRange)) {
        console.warn(reformat(`
            ${`Missing package-local depedency in package.json`.underline}

            ${`"embark" was not validly specified in dependencies or devDependencies`.yellow.bold}

            ${`recommended fix: \`npm install --save embark\``.green.bold}
        `));
        warned = true;
    }




        if (cmdVersion !== pkgCmdVersion) {
            console.warn(reformat(`
                ${`Embark version mismatch`.underline}

                ${`Invoked embark cli was a different version than package-local embark`.yellow.bold}

                ${pkgCmdVersion.green.bold} \t local \t\t ${pkgCmdPath}
                ${cmdVersion.yellow.bold} \t invoked \t ${cmdPath}
            `));
            warned = true;
        }
    } catch (e) {
        console.warn(reformat(`
            ${`Missing version information`.underline}

            ${`Version info not obtained from package-local embark command`.yellow.bold}

            path: ${pkgCmdPath}
        `));
        warned = true;
    }



});
