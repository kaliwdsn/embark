#!/usr/bin/env node

var dedent = require('dedent');
var fs = require('fs');
var path = require('path');
var semver = require('semver');

// console.log();
// console.log('process.argv');
// console.log(process.argv);

var CmdEmbark = require('../lib/index');
var minVer = '8.11.3';
var procVer = semver.clean(process.version);
var warned = false;

function reformat(s) {
    return '\n' + dedent(s).trim();
}

if (semver.lt(procVer, minVer)) {
    console.error(reformat(`
        ${`Unsupported Node.js version`.underline}

        ${`Embark requires a newer version of Node.js`.red.bold}

        ${`>= ${minNodeVer}`.green.bold} \t required
        ${`   ${procNodeVer}`.red.bold} \t actual
    `));
    process.exit();
}

var cmdPath = __filename;
var cmdPathReal = fs.realpathSync(cmdPath);
var cmdVersion = semver.clean((new CmdEmbark).version);

var PkgCmdEmbark = null;
var pkgCmdPath = path.join(process.cwd(), 'node_modules/.bin/embark');
var pkgCmdPathReal = null;
var pkgCmdVersion = null;

if (path.dirname(cmdPath).split(path.sep).pop() !== '.bin') {
    try {
        pkgCmdPathReal = fs.realpathSync(pkgCmdPath);
    } catch (e) {
        console.warn(reformat(`
            ${`Missing package-local embark command`.underline}

            ${`Path not found`.yellow.bold}

            ${pkgCmdPath.red.bold}
        `));
        warned = true;
    }
}

// console.log();
// console.log('cmd path:', cmdPath);
// console.log('cmd real:', cmdPathReal);
// console.log('pkgCmd path:', pkgCmdPath);
// console.log('pkgCmd real:', pkgCmdPathReal);

var pkgJson = null;
var pkgJsonPath = path.join(process.cwd(), 'package.json');
var pkgJsonPathReal = null;
var pkgJsonDepVersionRange = null;
var pkgJsonDevDepVersionRange = null;

try {
    pkgJsonPathReal = fs.realpathSync(pkgJsonPath);
} catch (e) {
    console.warn(reformat(`
        ${`Missing package.json`.underline}

        ${`Path not found`.yellow.bold}

        ${pkgJsonPath.red.bold}
    `));
    warned = true;
}

if (pkgJsonPathReal) {
    try {
        pkgJson = require(pkgJsonPath);
    } catch (e) {
        console.warn(reformat(`
            ${`Bad package.json`.underline}

            ${`Contents invalid`.yellow.bold}

            ${pkgJsonPath.red.bold}
        `));
        warned = true;;
    }
}

if (pkgJsonPathReal && pkgJson) {
    try {
        pkgJsonDepVersionRange = pkgJson.dependencies.embark;
        pkgJsonDepVersionRange =
            semver.Range(pkgJsonDepVersionRange).range;
    } catch (e) {
        pkgJsonDepVersionRange = null;
    }

    try {
        pkgJsonDevDepVersionRange = pkgJson.devDependencies.embark;
        pkgJsonDevDepVersionRange =
            semver.Range(pkgJsonDevDepVersionRange).range;
    } catch (e) {
        pkgJsonDevDepVersionRange = null;
    }

    if (!(pkgJsonDepVersionRange || pkgJsonDevDepVersionRange)) {
        console.warn(reformat(`
            ${`Missing package-local depedency in package.json`.underline}

            ${`"embark" was not validly specified in dependencies or devDependencies`.yellow.bold}

            ${`recommended fix: \`npm install --save embark\``.green.bold}
        `));
        warned = true;
    }
}

// console.log();
// console.log('package.json');
// console.log(pkgJson);

// console.log();
// console.log('embark dep info');
// console.log('dep:', pkgJsonDepVersionRange);
// console.log('devDep:', pkgJsonDevDepVersionRange);

if (pkgCmdPathReal && cmdPathReal !== pkgCmdPathReal) {
    try {
        PkgCmdEmbark = require(
            path.join(path.dirname(pkgCmdPath), '../embark/lib/index')
        );
        pkgCmdVersion = semver.clean((new PkgCmdEmbark).version);

        if (cmdVersion !== pkgCmdVersion) {
            console.warn(reformat(`
                ${`Embark version mismatch`.underline}

                ${`Invoked embark cli was a different version than package-local embark`.yellow.bold}

                ${pkgCmdVersion.green.bold} \t local \t\t ${pkgCmdPath}
                ${cmdVersion.yellow.bold} \t invoked \t ${cmdPath}
            `));
            warned = true;
        }
    } catch (e) {
        console.warn(reformat(`
            ${`Missing version information`.underline}

            ${`Version info not obtained from package-local embark command`.yellow.bold}

            path: ${pkgCmdPath}
        `));
        warned = true;
    }
}

if (warned) {
    console.log();
}

// console.log();
// console.log('embark version info');
// console.log('cmd:', cmdVersion);
// console.log('pkgCmd:', pkgCmdVersion);
// console.log();

if (pkgCmdVersion) {
    process.argv[1] = pkgCmdPath;
    require(pkgCmdPath);
} else {
    var Cmd = require('../lib/cmd');
    var cli = new Cmd();
    cli.process(process.argv);
}
